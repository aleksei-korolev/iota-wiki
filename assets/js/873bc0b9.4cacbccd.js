"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[72088],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),b=l(r),h=a,d=b["".concat(c,".").concat(h)]||b[h]||p[h]||o;return r?n.createElement(d,i(i({ref:t},u),{},{components:r})):n.createElement(d,i({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},41437:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var n=r(87462),a=(r(67294),r(3905));const o={description:"A channel subscriber is any user within a channel that is not the author.  It can be generated independently without verification by an author.",image:"/img/overview/layered_overview.svg",keywords:["explanation","subscribers","share keys","authorization"]},i="Subscribers",s={unversionedId:"explanations/channels_protocol/subscribers",id:"explanations/channels_protocol/subscribers",title:"Subscribers",description:"A channel subscriber is any user within a channel that is not the author.  It can be generated independently without verification by an author.",source:"@site/iota/external/streams/develop/documentation/docs/explanations/channels_protocol/subscribers.md",sourceDirName:"explanations/channels_protocol",slug:"/explanations/channels_protocol/subscribers",permalink:"/streams/explanations/channels_protocol/subscribers",draft:!1,editUrl:"https://github.com/iotaledger/streams/edit/develop/documentation/iota/external/streams/develop/documentation/docs/explanations/channels_protocol/subscribers.md",tags:[],version:"current",frontMatter:{description:"A channel subscriber is any user within a channel that is not the author.  It can be generated independently without verification by an author.",image:"/img/overview/layered_overview.svg",keywords:["explanation","subscribers","share keys","authorization"]},sidebar:"docs",previous:{title:"Authors",permalink:"/streams/explanations/channels_protocol/authors"},next:{title:"Branching",permalink:"/streams/explanations/channels_protocol/branching"}},c={},l=[],u={toc:l};function p(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"subscribers"},"Subscribers"),(0,a.kt)("p",null,"A channel subscriber is any user within a channel that is not the author. A subscriber can be generated\nindependently without verification by an author, but in order to write to a branch, or to process any\nprivate streams, they will be required to subscribe to the channel, and have the author accept and process\nthat subscription. A subscriber may also use pre-shared keys instead of subscription as a method of\ninteracting with a stream without conducting a subscription process."))}p.isMDXComponent=!0}}]);