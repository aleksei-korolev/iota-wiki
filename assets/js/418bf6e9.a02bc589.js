"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[79294],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),h=a,g=c["".concat(s,".").concat(h)]||c[h]||u[h]||r;return n?i.createElement(g,o(o({ref:t},d),{},{components:n})):i.createElement(g,o({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},83519:(e,t,n)=>{n.d(t,{ZP:()=>o});var i=n(87462),a=(n(67294),n(3905));const r={toc:[]};function o(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{title:"Password Storage",type:"warning"},(0,a.kt)("p",{parentName:"admonition"},"It is not recommended to store passwords or seeds on a host's environment variables or in the source code in a production\nsetup. Please follow our ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.iota.org/chrysalis-docs/guides/backup_security"},"backup and security"),"\nrecommendations for production use.")))}o.isMDXComponent=!0},96259:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=n(87462),a=(n(67294),n(3905)),r=n(83519);const o={description:"Getting started with the official IOTA Client Library Python binding.",image:"/img/logo/iota_mark_light.png",keywords:["Python","install","pip","unpack"]},l="Getting Started with IOTA Client Python Binding",s={unversionedId:"getting_started/python",id:"getting_started/python",title:"Getting Started with IOTA Client Python Binding",description:"Getting started with the official IOTA Client Library Python binding.",source:"@site/iota/external/iota.rs/production/documentation/docs/getting_started/python.mdx",sourceDirName:"getting_started",slug:"/getting_started/python",permalink:"/iota.rs/getting_started/python",draft:!1,editUrl:"https://github.com/iotaledger/iota.rs/edit/production/documentation/iota/external/iota.rs/production/documentation/docs/getting_started/python.mdx",tags:[],version:"current",frontMatter:{description:"Getting started with the official IOTA Client Library Python binding.",image:"/img/logo/iota_mark_light.png",keywords:["Python","install","pip","unpack"]},sidebar:"docs",previous:{title:"Getting Started With Node.js",permalink:"/iota.rs/getting_started/nodejs"},next:{title:"Getting Started With Rust",permalink:"/iota.rs/getting_started/rust"}},p={},d=[{value:"Security",id:"security",level:2},{value:"Requirements",id:"requirements",level:2},{value:"Installation",id:"installation",level:2},{value:"Install prebuild libraries",id:"install-prebuild-libraries",level:3},{value:"Install from source",id:"install-from-source",level:3},{value:"Additional Requirements",id:"additional-requirements",level:3},{value:"Clone the Repository",id:"clone-the-repository",level:4},{value:"Change to the Python Binding Directory",id:"change-to-the-python-binding-directory",level:4},{value:"Install the Required Dependencies and Build the Wheel",id:"install-the-required-dependencies-and-build-the-wheel",level:4},{value:"Usage",id:"usage",level:2}],u={toc:d};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started-with-iota-client-python-binding"},"Getting Started with IOTA Client Python Binding"),(0,a.kt)("h2",{id:"security"},"Security"),(0,a.kt)(r.ZP,{mdxType:"WarningPasswordStorage"}),(0,a.kt)("h2",{id:"requirements"},"Requirements"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.python.org"},"Python 3.x"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://pypi.org/project/pip"},"pip"),".")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("h3",{id:"install-prebuild-libraries"},"Install prebuild libraries"),(0,a.kt)("p",null,"Easiest way how to get python binding up and running is to leverage pre-built python libraries for linux/macos/windows that can be installed to your python environment (3.6+) via ",(0,a.kt)("inlineCode",{parentName:"p"},"pip"),". The binding is automagically generated using github ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/iota.rs/actions/workflows/python-bindings-publish.yml?query=branch%3Aproduction"},"actions"),"."),(0,a.kt)("p",null,"The latest artifacts for major python versions can be also grabbed using ",(0,a.kt)("a",{parentName:"p",href:"https://nightly.link/iotaledger/iota.rs/workflows/python-bindings-publish/production"},"nighly.link service"),". Download zip file for the given os and pyversion, unpack wheel file (",(0,a.kt)("inlineCode",{parentName:"p"},".whl"),") and install it via ",(0,a.kt)("inlineCode",{parentName:"p"},"pip"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip install <wheel_file>\n")),(0,a.kt)("h3",{id:"install-from-source"},"Install from source"),(0,a.kt)("h3",{id:"additional-requirements"},"Additional Requirements"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/cargo/getting-started/installation.html"},"Rust and Cargo"),"."),(0,a.kt)("li",{parentName:"ul"},"(for Linux only) ",(0,a.kt)("inlineCode",{parentName:"li"},"libudev"),". You can install it with ",(0,a.kt)("inlineCode",{parentName:"li"},"apt install libudev-dev"),".")),(0,a.kt)("h4",{id:"clone-the-repository"},"Clone the Repository"),(0,a.kt)("p",null,"You can clone the iota.rs client library by running the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone -b production https://github.com/iotaledger/iota.rs\n")),(0,a.kt)("h4",{id:"change-to-the-python-binding-directory"},"Change to the Python Binding Directory"),(0,a.kt)("p",null,"After you have cloned the repository, you should change directory to iota.rs/bindings/python/native. You can do so by running the following command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd iota.rs/bindings/python/native\n")),(0,a.kt)("h4",{id:"install-the-required-dependencies-and-build-the-wheel"},"Install the Required Dependencies and Build the Wheel"),(0,a.kt)("p",null,"Install and run maturin:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install maturin\nmaturin develop\nmaturin build --manylinux off\n")),(0,a.kt)("p",null,"The wheel file is now created in ",(0,a.kt)("inlineCode",{parentName:"p"},"bindings/python/native/target/wheels"),". You can install it with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip3 install [THE_BUILT_WHEEL_FILE]\n")),(0,a.kt)("p",null,"Once it has been properly installed you can double check it using ",(0,a.kt)("inlineCode",{parentName:"p"},"pip"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"pip list\n")),(0,a.kt)("p",null,"You should see the similar output:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-plaintext"},"Package                    Version\n-------------------------- -------\niota-client-python           0.2.0a3\n")),(0,a.kt)("p",null,"Once installed in the given python environment you are all set and can start hacking using python binding!"),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import iota_client\nprint(iota_client.__doc__)\nprint(dir(iota_client))\n\nclient = iota_client.Client(nodes_name_password=[['https://api.lb-0.h.chrysalis-devnet.iota.cafe']])\n\nprint('get_health()')\nprint(f'health: {client.get_health()}')\n\nprint('get_info()')\nprint(f'node_info: {client.get_info()}')\n")))}c.isMDXComponent=!0}}]);