"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[52229],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},h={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=c(t),g=i,u=p["".concat(l,".").concat(g)]||p[g]||h[g]||r;return t?a.createElement(u,o(o({ref:n},d),{},{components:t})):a.createElement(u,o({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},70807:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(87462),i=(t(67294),t(3905));const r={description:"How to manage a chain using the Grafana dashboard, a client to receive published events, logging, and validators.",image:"/img/logo/WASP_logo_dark.png",keywords:["Smart Contracts","Chain","Management","Grafana"]},o="Chain Management",s={unversionedId:"guide/chains_and_nodes/chain-management",id:"guide/chains_and_nodes/chain-management",title:"Chain Management",description:"How to manage a chain using the Grafana dashboard, a client to receive published events, logging, and validators.",source:"@site/next/external/wasp/documentation/docs/guide/chains_and_nodes/chain-management.md",sourceDirName:"guide/chains_and_nodes",slug:"/guide/chains_and_nodes/chain-management",permalink:"/next/smart-contracts/guide/chains_and_nodes/chain-management",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/develop/documentation/next/external/wasp/documentation/docs/guide/chains_and_nodes/chain-management.md",tags:[],version:"current",frontMatter:{description:"How to manage a chain using the Grafana dashboard, a client to receive published events, logging, and validators.",image:"/img/logo/WASP_logo_dark.png",keywords:["Smart Contracts","Chain","Management","Grafana"]},sidebar:"tutorialSidebar",previous:{title:"Setting Up a Chain",permalink:"/next/smart-contracts/guide/chains_and_nodes/setting-up-a-chain"},next:{title:"Testnet",permalink:"/next/smart-contracts/guide/chains_and_nodes/testnet"}},l={},c=[{value:"Monitoring",id:"monitoring",level:2},{value:"Managing Chain Configuration and Validators",id:"managing-chain-configuration-and-validators",level:2},{value:"Changing Chain Ownership",id:"changing-chain-ownership",level:3},{value:"Changing Access Nodes",id:"changing-access-nodes",level:3},{value:"Changing the Set of Validators",id:"changing-the-set-of-validators",level:3}],d={toc:c};function h(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"chain-management"},"Chain Management"),(0,i.kt)("h2",{id:"monitoring"},"Monitoring"),(0,i.kt)("p",null,"You can view the chain state using the dashboard (by default on port ",(0,i.kt)("inlineCode",{parentName:"p"},":7000"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"<URL>/wasp/dashboard")," when using ",(0,i.kt)("inlineCode",{parentName:"p"},"node-docker-setup"),")."),(0,i.kt)("h2",{id:"managing-chain-configuration-and-validators"},"Managing Chain Configuration and Validators"),(0,i.kt)("p",null,"You can manage the chain configuration and committee of validators by interacting with\nthe ",(0,i.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/core_concepts/core_contracts/governance"},"Governance contract"),"."),(0,i.kt)("p",null,"The \u201cChain Owner\u201d is the only one who can perform administrative tasks."),(0,i.kt)("h3",{id:"changing-chain-ownership"},"Changing Chain Ownership"),(0,i.kt)("p",null,"To change the chain ownership, the current \u201cChain Owner\u201d must call ",(0,i.kt)("inlineCode",{parentName:"p"},"delegateChainOwnership")," specifying the ",(0,i.kt)("inlineCode",{parentName:"p"},"agentID")," of\nthe next owner. The next owner must call ",(0,i.kt)("inlineCode",{parentName:"p"},"claimChainOwnership")," to finalize the process."),(0,i.kt)("h3",{id:"changing-access-nodes"},"Changing Access Nodes"),(0,i.kt)("p",null,"For new access nodes to join the network, they need to:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Be added as a trusted peer to at least 1 of the existing nodes."),(0,i.kt)("li",{parentName:"ul"},"Be added by the administrator to the list of access nodes by calling ",(0,i.kt)("inlineCode",{parentName:"li"},"changeAccessNodes"),". There is a helper in\nwasp-cli to do so:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli chain gov-change-access-nodes accept <pubkey (0x...)> \n")),(0,i.kt)("p",null,"After this, new nodes should be able to sync the state and execute view queries (call view entry points)."),(0,i.kt)("p",null,"You can remove an access node by calling ",(0,i.kt)("inlineCode",{parentName:"p"},"changeAccessNodes"),"."),(0,i.kt)("p",null,'Alternatively, to add any node as an "access node", you can add "non-permissioned" access nodes, without the signature from the chain owner.\nYou can do this by using the following command:'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli chain access-nodes <add|remove> <pubkey (0x...)> \n")),(0,i.kt)("p",null,'This node won\'t be "officially" recognized by the committee, but will still be able to sync the state and provide all regular functionality.'),(0,i.kt)("h3",{id:"changing-the-set-of-validators"},"Changing the Set of Validators"),(0,i.kt)("p",null,"You can do this in different ways, depending on whom the\n",(0,i.kt)("a",{parentName:"p",href:"https://wiki.iota.org/shimmer/introduction/explanations/ledger/alias"},"governor address")," of the alias output of the\nchain is."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If the chain governor address is the chain committee, you can perform the rotation by calling\n",(0,i.kt)("inlineCode",{parentName:"li"},"rotateStateController")," after adding the next state controller via ",(0,i.kt)("inlineCode",{parentName:"li"},"addAllowedStateControllerAddress"),"."),(0,i.kt)("li",{parentName:"ul"},"If the chain governor address is a regular user wallet (that you control), you can issue the rotation transaction using wasp-cli:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli chain rotate <new controller address>\n")),(0,i.kt)("p",null,"or:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli chain rotate-with-dkg --peers=<...>\n")))}h.isMDXComponent=!0}}]);