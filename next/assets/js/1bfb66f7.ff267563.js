"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[2607],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5817:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const i={description:"Setting up a chain requirements, configuration parameters, validators and tests.",image:"/img/logo/WASP_logo_dark.png",keywords:["Smart Contracts","Chain","Set up","Configuration","Nodes","Tests"]},o="Setting Up a Chain",s={unversionedId:"guide/chains_and_nodes/setting-up-a-chain",id:"guide/chains_and_nodes/setting-up-a-chain",title:"Setting Up a Chain",description:"Setting up a chain requirements, configuration parameters, validators and tests.",source:"@site/next/external/wasp/documentation/docs/guide/chains_and_nodes/setting-up-a-chain.md",sourceDirName:"guide/chains_and_nodes",slug:"/guide/chains_and_nodes/setting-up-a-chain",permalink:"/next/smart-contracts/guide/chains_and_nodes/setting-up-a-chain",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/develop/documentation/next/external/wasp/documentation/docs/guide/chains_and_nodes/setting-up-a-chain.md",tags:[],version:"current",frontMatter:{description:"Setting up a chain requirements, configuration parameters, validators and tests.",image:"/img/logo/WASP_logo_dark.png",keywords:["Smart Contracts","Chain","Set up","Configuration","Nodes","Tests"]},sidebar:"tutorialSidebar",previous:{title:"Configuring wasp-cli",permalink:"/next/smart-contracts/guide/chains_and_nodes/wasp-cli"},next:{title:"Chain Management",permalink:"/next/smart-contracts/guide/chains_and_nodes/chain-management"}},l={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Trust Setup",id:"trust-setup",level:2},{value:"Starting The Chain",id:"starting-the-chain",level:2},{value:"Requesting Test Funds (only for testnet)",id:"requesting-test-funds-only-for-testnet",level:3},{value:"Deploy the IOTA Smart Contracts Chain",id:"deploy-the-iota-smart-contracts-chain",level:3},{value:"Testing If It Works",id:"testing-if-it-works",level:2},{value:"Deploying a Wasm Contract",id:"deploying-a-wasm-contract",level:3},{value:"Interacting With a Smart Contract",id:"interacting-with-a-smart-contract",level:3},{value:"Troubleshooting",id:"troubleshooting",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"setting-up-a-chain"},"Setting Up a Chain"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},'It is possible to run a "committee" of a single Wasp node, and this is okay for testing purposes.'),(0,r.kt)("p",{parentName:"admonition"},"However, in normal operation, multiple Wasp nodes should be used.")),(0,r.kt)("h2",{id:"requirements"},"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/next/smart-contracts/guide/chains_and_nodes/wasp-cli"},(0,r.kt)("inlineCode",{parentName:"a"},"wasp-cli")," configured")," to interact with your wasp node.")),(0,r.kt)("h2",{id:"trust-setup"},"Trust Setup"),(0,r.kt)("p",null,"After starting all the ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp")," nodes, you should make them trust each other. Node operators should do this manually. It's\ntheir responsibility to accept trusted nodes only."),(0,r.kt)("p",null,"The operator can read their node's public key and PeeringURL by running ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp-cli peering info"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli peering info\n")),(0,r.kt)("p",null,"Example response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"PubKey: 8oQ9xHWvfnShRxB22avvjbMyAumZ7EXKujuthqrzapNM\nPeeringURL:  127.0.0.1:4000\n")),(0,r.kt)("p",null,"PubKey and PeeringURL should be provided to other node operators.\nThey can use this info to trust your node and accept communications with it.\nThat's done by invoking ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp-cli peering trust <Name for the peer> <PubKey> <PeeringURL>"),", e.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli peering trust another-node 8oQ9xHWvfnShRxB22avvjbMyAumZ7EXKujuthqrzapNM 127.0.0.1:4000\n")),(0,r.kt)("p",null,"The list of trusted peers of your wasp node can be viewed with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli peering list-trusted\n")),(0,r.kt)("p",null,"All the nodes in a committee must trust each other to run the chain."),(0,r.kt)("h2",{id:"starting-the-chain"},"Starting The Chain"),(0,r.kt)("h3",{id:"requesting-test-funds-only-for-testnet"},"Requesting Test Funds (only for testnet)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli request-funds\n")),(0,r.kt)("h3",{id:"deploy-the-iota-smart-contracts-chain"},"Deploy the IOTA Smart Contracts Chain"),(0,r.kt)("p",null,"You can deploy your IOTA Smart Contracts chain by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'wasp-cli chain deploy --peers=foo,bar,baz --chain=mychain --description="My chain"\n')),(0,r.kt)("p",null,"The names in ",(0,r.kt)("inlineCode",{parentName:"p"},"--peers=foo,bar,baz")," correspond to the names of the trusted peers of the node."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--chain=mychain")," flag sets up an alias for the chain. From now on all chain commands will be targeted to this\nchain."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"--quorum")," flag indicates the minimum amount of nodes required to form a consensus. The recommended formula to\nobtain this number ",(0,r.kt)("inlineCode",{parentName:"p"},"floor(N*2/3)+1")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"N")," is the number of nodes in your committee."),(0,r.kt)("p",null,"After deployment, the chain must be activated by the node operators of all peers."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli chain add <name> <chainID> # adds the chain to the wasp-cli config, can be skipped on the wasp-cli that initiated the deployment \nwasp-cli chain activate --chain=<name>\n\n")),(0,r.kt)("h2",{id:"testing-if-it-works"},"Testing If It Works"),(0,r.kt)("p",null,"You can check that the chain was properly deployed in the Wasp node dashboard (",(0,r.kt)("inlineCode",{parentName:"p"},"<URL>/wasp/dashboard")," when using ",(0,r.kt)("inlineCode",{parentName:"p"},"node-docker-setup"),").\nNote that the chain was deployed with some ",(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/core_concepts/core_contracts/overview"},"core contracts"),"."),(0,r.kt)("p",null,"You should also have an EVM-JSONRPC server opened on:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-info"},"<wasp API URL>/chain/<CHAINID>/evm\n")),(0,r.kt)("h3",{id:"deploying-a-wasm-contract"},"Deploying a Wasm Contract"),(0,r.kt)("admonition",{type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"The WASM VM is experimental. However, similar commands can be used to interact with the core contracts")),(0,r.kt)("p",null,"Now you can deploy a Wasm contract to the chain:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'wasp-cli chain deploy-contract wasmtime inccounter "inccounter SC" tools/cluster/tests/wasm/inccounter_bg.wasm\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"inccounter_bg.wasm")," file is a precompiled Wasm contract included in the Wasp repo as an example."),(0,r.kt)("p",null,"If you check the dashboard again, you should see that the ",(0,r.kt)("inlineCode",{parentName:"p"},"inccounter")," contract is listed in the chain."),(0,r.kt)("h3",{id:"interacting-with-a-smart-contract"},"Interacting With a Smart Contract"),(0,r.kt)("p",null,"You can interact with a contract by calling its exposed functions and views."),(0,r.kt)("p",null,"For instance, the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/tree/master/contracts/wasm/inccounter/src"},(0,r.kt)("inlineCode",{parentName:"a"},"inccounter"))," contract\nexposes the ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," function, which simply increments a counter stored in the state. It also has the ",(0,r.kt)("inlineCode",{parentName:"p"},"getCounter"),"\nview that returns the current value of the counter."),(0,r.kt)("p",null,"You can call the ",(0,r.kt)("inlineCode",{parentName:"p"},"getCounter")," view by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli chain call-view inccounter getCounter | wasp-cli decode string counter int\n")),(0,r.kt)("p",null,"Example response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"counter: 0\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The part after ",(0,r.kt)("inlineCode",{parentName:"p"},"|")," is necessary because the return value is encoded, and you need to know the ",(0,r.kt)("em",{parentName:"p"},"schema")," in order to\ndecode it. ",(0,r.kt)("strong",{parentName:"p"},"The schema definition is in its early stages and will likely change in the future."))),(0,r.kt)("p",null,"You can now call the ",(0,r.kt)("inlineCode",{parentName:"p"},"increment")," function by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli chain post-request inccounter increment\n")),(0,r.kt)("p",null,"After the request has been processed by the committee, you should get a new\ncounter value after calling ",(0,r.kt)("inlineCode",{parentName:"p"},"getCounter"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli chain call-view inccounter getCounter | wasp-cli decode string counter int\n")),(0,r.kt)("p",null,"Example response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-log"},"counter: 1\n")),(0,r.kt)("h3",{id:"troubleshooting"},"Troubleshooting"),(0,r.kt)("p",null,"Common issues can be caused by using an incompatible version of ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp")," / ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp-cli"),".\nYou can verify that ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp-cli")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"wasp")," nodes are on the same version by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"wasp-cli check-versions\n")))}u.isMDXComponent=!0}}]);