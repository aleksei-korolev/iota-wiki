"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[10872],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,h=u["".concat(d,".").concat(m)]||u[m]||c[m]||s;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var l=2;l<s;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},70445:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const s={description:"Use an Ed25519 master seed to generate addresses in a deterministic manner",image:"/img/client_banner.png",keywords:["tutorial","deterministic address path","ed25519 key pair","key pair","bip32 path","external operations","internal operations"]},i="Generate Addresses",o={unversionedId:"tutorials/value-transactions/generate-addresses",id:"tutorials/value-transactions/generate-addresses",title:"Generate Addresses",description:"Use an Ed25519 master seed to generate addresses in a deterministic manner",source:"@site/next/external/iota.js/documentation/docs/tutorials/value-transactions/04-generate-addresses.md",sourceDirName:"tutorials/value-transactions",slug:"/tutorials/value-transactions/generate-addresses",permalink:"/next/iotajs/tutorials/value-transactions/generate-addresses",draft:!1,editUrl:"https://github.com/iotaledger/iota.js/tree/dev/packages/iota/documentation/next/external/iota.js/documentation/docs/tutorials/value-transactions/04-generate-addresses.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{description:"Use an Ed25519 master seed to generate addresses in a deterministic manner",image:"/img/client_banner.png",keywords:["tutorial","deterministic address path","ed25519 key pair","key pair","bip32 path","external operations","internal operations"]},sidebar:"docs",previous:{title:"Generate Seeds",permalink:"/next/iotajs/tutorials/value-transactions/generate-a-seed"},next:{title:"Public Addresses",permalink:"/next/iotajs/tutorials/value-transactions/public-addresses"}},d={},l=[{value:"Deterministic Address Paths (BIP32)",id:"deterministic-address-paths-bip32",level:2},{value:"Ed25519 Key Pairs for the Addresses",id:"ed25519-key-pairs-for-the-addresses",level:2},{value:"Putting It All Together",id:"putting-it-all-together",level:2}],p={toc:l};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"generate-addresses"},"Generate Addresses"),(0,r.kt)("h2",{id:"deterministic-address-paths-bip32"},"Deterministic Address Paths (BIP32)"),(0,r.kt)("p",null,"You can use the ",(0,r.kt)("a",{parentName:"p",href:"/next/iotajs/tutorials/value-transactions/generate-a-seed#generate-an-ed25519-master-seed"},"Ed25519 master seed")," to generate addresses in\na deterministic manner.\nThese addresses will be Ed25519 key pairs generated through\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki"},"BIP32"),"\nmethod and structured as per the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki"},"BIP44")," logical\nhierarchy."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"iota.js")," library provides a method ",(0,r.kt)("a",{parentName:"p",href:"../../references/client/api_ref#generatebip44address"},(0,r.kt)("inlineCode",{parentName:"a"},"generateBip44Address")),"\nthat creates these BIP32 paths using a state object that is updated on each call, as shown in the following snippet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const NUM_ADDR = 6;\nconst addressGeneratorAccountState = {\n    accountIndex: 0,\n    addressIndex: 0,\n    isInternal: false\n};\nconst paths: string[] = [];\nfor (let i = 0; i < NUM_ADDR; i++) {\n    const path = generateBip44Address(addressGeneratorAccountState);\n    paths.push(path);\n\n    console.log(`${path}`);\n}\n")),(0,r.kt)("p",null,"The script above will generate the following BIP32 paths:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"m/44'/4218'/0'/0'/0'\nm/44'/4218'/0'/1'/0'\nm/44'/4218'/0'/0'/1'\nm/44'/4218'/0'/1'/1'\nm/44'/4218'/0'/0'/2'\nm/44'/4218'/0'/1'/2'\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Where"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"44")," is a constant that denotes ",(0,r.kt)("em",{parentName:"li"},"purpose"),", (",(0,r.kt)("inlineCode",{parentName:"li"},"0x8000002C"),") following\nthe ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki"},"BIP43")," recommendation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"4218")," is the ",(0,r.kt)("em",{parentName:"li"},"coin type")," defined for Shimmer"),(0,r.kt)("li",{parentName:"ul"},"The three following numbers are:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"account index"),". Users can use these accounts to organize the funds in the same fashion as bank accounts;\nfor\ndonation purposes (where all addresses are considered public), for saving purposes, for common expenses, etc."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"change index"),". Allows separate addresses used for external operations (i.e., receive funds) or\ninternal operations (i.e., generate change)."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("strong",{parentName:"li"},"address index")," that increments sequentially")))),(0,r.kt)("p",null,"The example above generated six address paths for the account ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),". One address is for external operations and another for\ninternal operations for each index from ",(0,r.kt)("inlineCode",{parentName:"p"},"0")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),"."),(0,r.kt)("h2",{id:"ed25519-key-pairs-for-the-addresses"},"Ed25519 Key Pairs for the Addresses"),(0,r.kt)("p",null,"Before you can generate an Ed25519 key pair, you will need to generate a subsequent Ed25519 seed from a BIP32 path\nbefore."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const keyPairs: IKeyPair[] = [];\n\nfor (const path of paths) {\n    // Master seed was generated previously\n    const addressSeed = masterSeed.generateSeedFromPath(new Bip32Path(path));\n    const addressKeyPair = addressSeed.keyPair();\n    keyPairs.push(addressKeyPair);\n\n    console.log(Converter.bytesToHex(addressKeyPair.privateKey, true));\n    console.log(Converter.bytesToHex(addressKeyPair.publicKey, true));\n}\n")),(0,r.kt)("p",null,"As the keys are generated as byte arrays (",(0,r.kt)("inlineCode",{parentName:"p"},"UInt8Array"),") it is necessary to encode them using displayable characters. In\nthis case, hexadecimal characters using\nthe ",(0,r.kt)("a",{parentName:"p",href:"../../references/util/classes/Converter#bytestohex"},(0,r.kt)("inlineCode",{parentName:"a"},"Converter.bytesToHex()")),"\nfunction. The trailing ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," parameter indicates that the ",(0,r.kt)("inlineCode",{parentName:"p"},"0x")," prefix will be included in the representation.\nYou can revert the result to bytes (",(0,r.kt)("inlineCode",{parentName:"p"},"UInt8Array"),")  using\nthe ",(0,r.kt)("a",{parentName:"p",href:"../../references/util/classes/Converter#hextobytes"},(0,r.kt)("inlineCode",{parentName:"a"},"Converter.hexToBytes()"))),(0,r.kt)("p",null,"The generated key pairs should look like the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0x6f0fa2f7a9d5fbd221c20f54d944378acb871dcdeafc3761e73d7f0aa05c75356f8eeee559daa287ec40a3a7113e88df2fc27bc77819e6d3d146a7dc7a4e939c")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"0x6f8eeee559daa287ec40a3a7113e88df2fc27bc77819e6d3d146a7dc7a4e939c"))),(0,r.kt)("p",null,"The Ed25519 private key contains ",(0,r.kt)("inlineCode",{parentName:"p"},"128")," hex chars that correspond to ",(0,r.kt)("inlineCode",{parentName:"p"},"64")," bytes. The public key can be represented\nusing ",(0,r.kt)("inlineCode",{parentName:"p"},"64")," hex chars, i.e. ",(0,r.kt)("inlineCode",{parentName:"p"},"32")," bytes."),(0,r.kt)("p",null,"You now have your asymmetric cryptography set, but you still need to\ngenerate ",(0,r.kt)("a",{parentName:"p",href:"/next/iotajs/tutorials/value-transactions/public-addresses"},"public addresses")," that will be used in the Shimmer network."),(0,r.kt)("h2",{id:"putting-it-all-together"},"Putting It All Together"),(0,r.kt)("p",null,"By this point in the tutorial, your ",(0,r.kt)("inlineCode",{parentName:"p"},"generate-addresses.ts"),"file should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {Bip32Path, Bip39} from "@iota/crypto.js";\nimport {Ed25519Seed, generateBip44Address, IKeyPair} from "@iota/iota.js";\nimport {Converter} from "@iota/util.js";\n\n// Default entropy length is 256\n\nconst randomMnemonic = Bip39.randomMnemonic();\n\nconsole.log("Seed phrase:", randomMnemonic);\n\nconst masterSeed = Ed25519Seed.fromMnemonic(randomMnemonic);\n\nconst NUM_ADDR = 6;\nconst addressGeneratorAccountState = {\n    accountIndex: 0,\n    addressIndex: 0,\n    isInternal: false\n};\nconst paths: string[] = [];\nfor (let i = 0; i < NUM_ADDR; i++) {\n    const path = generateBip44Address(addressGeneratorAccountState);\n    paths.push(path);\n\n    console.log(`${path}`);\n}\n\n\nconst keyPairs: IKeyPair[] = [];\n\nfor (const path of paths) {\n    // Master seed was generated previously\n    const addressSeed = masterSeed.generateSeedFromPath(new Bip32Path(path));\n    const addressKeyPair = addressSeed.keyPair();\n    keyPairs.push(addressKeyPair);\n\n    console.log(Converter.bytesToHex(addressKeyPair.privateKey, true));\n    console.log(Converter.bytesToHex(addressKeyPair.publicKey, true));\n}\n')))}c.isMDXComponent=!0}}]);