"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[10428],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,g=d["".concat(l,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(g,o(o({ref:t},p),{},{components:n})):a.createElement(g,o({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},43081:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={description:"The ISC Magic Contract allows EVM contracts to access ISC functionality.",image:"/img/logo/WASP_logo_dark.png",keywords:["configure","using","EVM","magic","Ethereum","Solidity","metamask","JSON","RPC"]},o="The ISC Magic Contract",c={unversionedId:"guide/evm/magic",id:"guide/evm/magic",title:"The ISC Magic Contract",description:"The ISC Magic Contract allows EVM contracts to access ISC functionality.",source:"@site/next/external/wasp/documentation/docs/guide/evm/magic.md",sourceDirName:"guide/evm",slug:"/guide/evm/magic",permalink:"/next/smart-contracts/guide/evm/magic",draft:!1,editUrl:"https://github.com/iotaledger/wasp/edit/develop/documentation/next/external/wasp/documentation/docs/guide/evm/magic.md",tags:[],version:"current",frontMatter:{description:"The ISC Magic Contract allows EVM contracts to access ISC functionality.",image:"/img/logo/WASP_logo_dark.png",keywords:["configure","using","EVM","magic","Ethereum","Solidity","metamask","JSON","RPC"]},sidebar:"tutorialSidebar",previous:{title:"How to use EVM in IOTA Smart Contracts",permalink:"/next/smart-contracts/guide/evm/using"},next:{title:"EVM Tooling",permalink:"/next/smart-contracts/guide/evm/tooling"}},l={},s=[{value:"Examples",id:"examples",level:2},{value:"Calling getEntropy()",id:"calling-getentropy",level:3},{value:"Calling a native contract",id:"calling-a-native-contract",level:3},{value:"API Reference",id:"api-reference",level:2}],p={toc:s};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-isc-magic-contract"},"The ISC Magic Contract"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/evm/compatibility"},"EVM and ISC are inherently very different platforms"),".\nSome EVM-specific actions (e.g., manipulating Ethereum tokens) are disabled, and EVM contracts can access ISC-specific\nfunctionality through the ",(0,r.kt)("em",{parentName:"p"},"ISC Magic Contract"),"."),(0,r.kt)("p",null,"The Magic contract is an EVM contract deployed by default on every ISC chain, in the EVM genesis block, at\naddress ",(0,r.kt)("inlineCode",{parentName:"p"},"0x1074000000000000000000000000000000000000"),".\nThe implementation of the Magic contract is baked-in in\nthe ",(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/core_concepts/core_contracts/evm"},(0,r.kt)("inlineCode",{parentName:"a"},"evm"))," ",(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/core_concepts/core_contracts/overview"},"core contract"),");\ni.e. it is not a pure-Solidity contract."),(0,r.kt)("p",null,"The Magic contract has several methods, which are categorized into specialized\ninterfaces: ",(0,r.kt)("inlineCode",{parentName:"p"},"ISCSandbox"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ISCAccounts"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"ISCUtil")," and so on.\nYou can access these interfaces from any Solidity contract by importing\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ISC.sol"},"ISC library"),"."),(0,r.kt)("p",null,"The Magic contract also provides proxy ERC20 contracts to manipulate ISC base\ntokens and native tokens on L2."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("h3",{id:"calling-getentropy"},"Calling getEntropy()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'pragma solidity >=0.8.5;\n\nimport "@iscmagic/ISC.sol";\n\ncontract MyEVMContract {\n    event EntropyEvent(bytes32 entropy);\n\n    // this will emit a "random" value taken from the ISC entropy value\n    function emitEntropy() public {\n        bytes32 e = ISC.sandbox.getEntropy();\n        emit EntropyEvent(e);\n    }\n}\n')),(0,r.kt)("p",null,"In the example above, ",(0,r.kt)("inlineCode",{parentName:"p"},"ISC.sandbox.getEntropy()")," calls the\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ISCSandbox.sol#L20"},(0,r.kt)("inlineCode",{parentName:"a"},"getEntropy")),"\nmethod of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ISCSandbox")," interface, which, in turn,\ncalls ",(0,r.kt)("a",{parentName:"p",href:"/next/smart-contracts/guide/core_concepts/sandbox"},"ISC Sandbox's")," ",(0,r.kt)("inlineCode",{parentName:"p"},"GetEntropy"),"."),(0,r.kt)("h3",{id:"calling-a-native-contract"},"Calling a native contract"),(0,r.kt)("p",null,"You can call native contracts using ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ISCSandbox.sol#L56"},(0,r.kt)("inlineCode",{parentName:"a"},"ISC.sandbox.call")),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-solidity"},'pragma solidity >=0.8.5;\n\nimport "@iscmagic/ISC.sol";\n\ncontract MyEVMContract {\n    event EntropyEvent(bytes32 entropy);\n\n    function callInccounter() public {\n        ISCDict memory params = ISCDict(new ISCDictItem[](1));\n        bytes memory int64Encoded42 = hex"2A00000000000000";\n        params.items[0] = ISCDictItem("counter", int64Encoded42);\n        ISCAllowance memory allowance;\n        ISC.sandbox.call(ISC.util.hn("inccounter"), ISC.util.hn("incCounter"), params, allowance);\n    }\n}\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ISC.util.hn")," is used to get the ",(0,r.kt)("inlineCode",{parentName:"p"},"hname")," of the incounter countract and the\n",(0,r.kt)("inlineCode",{parentName:"p"},"incCounter")," entry point. You can also call view entry points using\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ISCSandbox.sol#L59"},"ISC.sandbox.callView"),"."),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ISCTypes.sol"},"Common type definitions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ISC.sol"},"ISC library")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ISCSandbox.sol"},"ISCSandbox"),"\ninterface, available at ",(0,r.kt)("inlineCode",{parentName:"li"},"ISC.sandbox")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ISCAccounts.sol"},"ISCAccounts"),"\ninterface, available at ",(0,r.kt)("inlineCode",{parentName:"li"},"ISC.accounts")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ISCUtil.sol"},"ISCUtil"),"\ninterface, available at ",(0,r.kt)("inlineCode",{parentName:"li"},"ISC.util")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ERC20BaseTokens.sol"},"ERC20BaseTokens"),"\ncontract, available at ",(0,r.kt)("inlineCode",{parentName:"li"},"ISC.erc20BaseTokens"),"\n(address ",(0,r.kt)("inlineCode",{parentName:"li"},"0x1074010000000000000000000000000000000000"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/iotaledger/wasp/blob/develop/packages/vm/core/evm/iscmagic/ERC20NativeTokens%EF%91%B4.sol"},"ERC20NativeTokens"),"\ncontract, available at ",(0,r.kt)("inlineCode",{parentName:"li"},"ISC.erc20NativeTokens(foundrySN)")," after being registered\nby the foundry owner by calling\n",(0,r.kt)("a",{parentName:"li",href:"/next/smart-contracts/guide/core_concepts/core_contracts/evm#registerERC20NativeToken"},(0,r.kt)("inlineCode",{parentName:"a"},"registerERC20NativeToken")),"\n(address ",(0,r.kt)("inlineCode",{parentName:"li"},"0x107402xxxxxxxx00000000000000000000000000")," where ",(0,r.kt)("inlineCode",{parentName:"li"},"xxxxxxxx")," is the\nlittle-endian encoding of the foundry serial number)")),(0,r.kt)("p",null,"There are some usage examples in\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/iotaledger/wasp/blob/develop/packages/evm/evmtest/ISCTest.sol"},"ISCTest.sol")," contract (used\ninternally in unit tests)."))}m.isMDXComponent=!0}}]);