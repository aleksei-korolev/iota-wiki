"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[13609],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),l=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,d=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=l(n),u=r,h=p["".concat(d,".").concat(u)]||p[u]||m[u]||s;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=p;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},53057:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const s={description:"Generate a Seed Phrase and Ed25519 Master Seed with iota.js.",image:"/img/client_banner.png",keywords:["tutorial","addresses","seed","seed phrase","ed25519 master seed","mnemonic seed phrase"]},o="Generate Seeds",i={unversionedId:"tutorials/value-transactions/generate-a-seed",id:"tutorials/value-transactions/generate-a-seed",title:"Generate Seeds",description:"Generate a Seed Phrase and Ed25519 Master Seed with iota.js.",source:"@site/shimmer/external/iota.js/documentation/docs/tutorials/value-transactions/03-generate-a-seed.md",sourceDirName:"tutorials/value-transactions",slug:"/tutorials/value-transactions/generate-a-seed",permalink:"/shimmer/iotajs/tutorials/value-transactions/generate-a-seed",draft:!1,editUrl:"https://github.com/iotaledger/iota.js/tree/dev/packages/iota/documentation/shimmer/external/iota.js/documentation/docs/tutorials/value-transactions/03-generate-a-seed.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Generate a Seed Phrase and Ed25519 Master Seed with iota.js.",image:"/img/client_banner.png",keywords:["tutorial","addresses","seed","seed phrase","ed25519 master seed","mnemonic seed phrase"]},sidebar:"docs",previous:{title:"Prepare Your Development Environment",permalink:"/shimmer/iotajs/tutorials/value-transactions/prepare-the-dev-env"},next:{title:"Generate Addresses",permalink:"/shimmer/iotajs/tutorials/value-transactions/generate-addresses"}},d={},l=[{value:"Generate a Seed Phrase and Ed25519 Master Seed",id:"generate-a-seed-phrase-and-ed25519-master-seed",level:2},{value:"Generate a Random Mnemonic Seed Phrase",id:"generate-a-random-mnemonic-seed-phrase",level:3},{value:"Generate an Ed25519 Master Seed",id:"generate-an-ed25519-master-seed",level:3},{value:"Putting It All Together",id:"putting-it-all-together",level:2}],c={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"generate-seeds"},"Generate Seeds"),(0,r.kt)("p",null,"The first thing you will need to send or receive a transaction is a valid address that can unlock outputs or receive new\noutputs. Addresses are derived from a public key, and their associated outputs can be unlocked with the corresponding\nprivate key. As with Firefly wallets, you can generate multiple addresses from an initial master secret (seed phrase),\nand, from that point on, use a hierarchical deterministic method to derive multiple addresses."),(0,r.kt)("h2",{id:"generate-a-seed-phrase-and-ed25519-master-seed"},"Generate a Seed Phrase and Ed25519 Master Seed"),(0,r.kt)("h3",{id:"generate-a-random-mnemonic-seed-phrase"},"Generate a Random Mnemonic Seed Phrase"),(0,r.kt)("p",null,"The seed phrase is generated in accordance with\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki"},"BIP39")," specification and is composed of a set of\nwords represented as a whitespace-separated string. You can generate a random mnemonic seed phrase using the\n",(0,r.kt)("a",{parentName:"p",href:"../../references/crypto/classes/Bip39#randommnemonic"},(0,r.kt)("inlineCode",{parentName:"a"},"Bip39.randomMnemonic()"))," function as shown in the code snippet\nbelow:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'// Default entropy length is 256\nconst randomMnemonic = Bip39.randomMnemonic();\n\nconsole.log("Seed phrase:", randomMnemonic);\n')),(0,r.kt)("h3",{id:"generate-an-ed25519-master-seed"},"Generate an Ed25519 Master Seed"),(0,r.kt)("p",null,"Once you have the seed phrase, also known as BIP39 random mnemonic, the next step is to obtain an ",(0,r.kt)("em",{parentName:"p"},"Ed25519 master seed"),"\nfrom the seed phrase. You can use the\n",(0,r.kt)("a",{parentName:"p",href:"../../references/client/classes/Ed25519Seed#frommnemonic"},(0,r.kt)("inlineCode",{parentName:"a"},"Ed25519Seed.fromMnemonic(randomMnemonic)"))," function as shown\nin the following snippet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const masterSeed = Ed25519Seed.fromMnemonic(randomMnemonic);\n")),(0,r.kt)("p",null,"You can later use this Ed25519 master seed will be used later to generate as many Ed25519 key pairs as you may need\nthrough the BIP32 deterministic method."),(0,r.kt)("h2",{id:"putting-it-all-together"},"Putting It All Together"),(0,r.kt)("p",null,"By this point in the tutorial, your ",(0,r.kt)("inlineCode",{parentName:"p"},"generate-addresses.ts"),"file should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},'import {Bip39} from "@iota/crypto.js";\nimport {Ed25519Seed} from "@iota/iota.js";\n\n// Default entropy length is 256\nconst randomMnemonic = Bip39.randomMnemonic();\n\nconsole.log("Seed phrase:", randomMnemonic);\n\nconst masterSeed = Ed25519Seed.fromMnemonic(randomMnemonic);\n')))}m.isMDXComponent=!0}}]);