"use strict";(self.webpackChunkiota_wiki=self.webpackChunkiota_wiki||[]).push([[53438],{3905:(e,t,n)=>{n.d(t,{Zo:()=>h,kt:()=>u});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},h=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,h=l(e,["components","mdxType","originalType","parentName"]),p=c(n),u=a,d=p["".concat(s,".").concat(u)]||p[u]||m[u]||i;return n?o.createElement(d,r(r({ref:t},h),{},{components:n})):o.createElement(d,r({ref:t},h))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var c=2;c<i;c++)r[c]=n[c];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}p.displayName="MDXCreateElement"},94029:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var o=n(87462),a=(n(67294),n(3905));const i={title:"Use Shimmer Python library together with IOTA Library",description:"How to use the Python Shimmer Library together with the IOTA library",keywords:["Python","IOTA","Shimmer"]},r=void 0,l={unversionedId:"how_tos/use-python-with-IOTA",id:"how_tos/use-python-with-IOTA",title:"Use Shimmer Python library together with IOTA Library",description:"How to use the Python Shimmer Library together with the IOTA library",source:"@site/shimmer/external/wallet.rs/documentation/docs/how_tos/use-python-with-IOTA.mdx",sourceDirName:"how_tos",slug:"/how_tos/use-python-with-IOTA",permalink:"/shimmer/wallet.rs/how_tos/use-python-with-IOTA",draft:!1,editUrl:"https://github.com/iotaledger/wallet.rs/edit/develop/documentation/shimmer/external/wallet.rs/documentation/docs/how_tos/use-python-with-IOTA.mdx",tags:[],version:"current",frontMatter:{title:"Use Shimmer Python library together with IOTA Library",description:"How to use the Python Shimmer Library together with the IOTA library",keywords:["Python","IOTA","Shimmer"]},sidebar:"docs",previous:{title:"Integrate wallet.rs With Your Exchange",permalink:"/shimmer/wallet.rs/how_tos/exchange_guide"},next:{title:"API Reference",permalink:"/shimmer/wallet.rs/references/rust_api_reference"}},s={},c=[{value:"Install Shimmer Version",id:"install-shimmer-version",level:3},{value:"Install IOTA Version",id:"install-iota-version",level:3},{value:"Usage",id:"usage",level:3}],h={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"As Python doesn't support using multiple versions of the same library, if you want to use both the Shimmer and IOTA version, you need to build one of them yourself and rename it.")),(0,a.kt)("p",null,"In this guide we will show you an Example on how you can install both the IOTA and Shimmer wallet library for usage in the same application.\nFor that we will build the IOTA wallet library ourselfes and rename it."),(0,a.kt)("h3",{id:"install-shimmer-version"},"Install Shimmer Version"),(0,a.kt)("p",null,"First install the Shimmer version following the ",(0,a.kt)("a",{parentName:"p",href:"/shimmer/wallet.rs/getting_started/python#install-the-library"},"installation guide"),"."),(0,a.kt)("h3",{id:"install-iota-version"},"Install IOTA Version"),(0,a.kt)("p",null,"To install the IOTA version you need to follow the ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.iota.org/wallet.rs/getting_started/python#install-from-source"},"Install from source")," guide.\nBefore you continue with the steps after having cloned the repo, we need to apply some changes to the repo first. "),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"In this guide we will rename the ",(0,a.kt)("inlineCode",{parentName:"p"},"iota-wallet")," to ",(0,a.kt)("inlineCode",{parentName:"p"},"iota-wallet-production"),", but you can use whatever you want.")),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"bindings/python/native/Cargo.toml")," change both names:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'[package]\n- name = "iota-wallet-python"\n+ name = "iota-wallet-production"\n  version = "0.2.0"\n  authors = ["IOTA Stiftung"]\n  edition = "2021"\n  description = "Python bindings for the IOTA wallet library"\n  documentation = "https://wiki.iota.org/wallet.rs/welcome"\n  homepage = "https://www.iota.org/"\n  repository = "https://github.com/iotaledger/wallet.rs"\n  license = "Apache-2.0"\n  keywords = ["iota", "wallet", "transaction", "python"]\n  categories = ["cryptography::cryptocurrencies"]\n\n[lib]\n- name = "iota_wallet"\n+ name = "iota_wallet_production"\n  crate-type = ["cdylib"]\n\n[dependencies]\n  .\n  .\n  .\n')),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"bindings/python/native/setup.py"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'setup(\n-   name="iota_wallet",\n+   name="iota_wallet_production",\n    version="0.2.0",\n    .\n    .\n    .\n')),(0,a.kt)("p",null,"And in ",(0,a.kt)("inlineCode",{parentName:"p"},"bindings/python/native/src/lib.rs"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},"/// IOTA Wallet implemented in Rust and binded by Python.\n#[pymodule]\n- fn iota_wallet(_py: Python, m: &PyModule) -> PyResult<()> {\n+ fn iota_wallet_production(_py: Python, m: &PyModule) -> PyResult<()> {\n      m.add_class::<AccountInitialiser>()?;\n      m.add_class::<AccountHandle>()?;\n      m.add_class::<SyncedAccount>()?;\n      .\n      .\n      .\n")),(0,a.kt)("p",null," Now you can continue the installation from ",(0,a.kt)("a",{parentName:"p",href:"https://wiki.iota.org/wallet.rs/getting_started/python#change-to-the-python-binding-directory"},"here"),"."),(0,a.kt)("h3",{id:"usage"},"Usage"),(0,a.kt)("p",null," With both libraries installed you can now use them for example like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import json\nfrom dotenv import load_dotenv\n\nfrom iota_wallet import IotaWallet as ShimmerWallet, StrongholdSecretManager\nimport iota_wallet_production as iota_wallet\n\n# Load the env variables\nload_dotenv()\n\n# Get the stronghold password\nSTRONGHOLD_PASSWORD = os.getenv(\'STRONGHOLD_PASSWORD\')\n\nshimmer_client_options = {\n   \'nodes\': [\'https://api.testnet.shimmer.network\'],\n}\n\n# Shimmer coin type\ncoin_type = 4219\n\nshimmer_secret_manager = StrongholdSecretManager("shimmer-wallet.stronghold", STRONGHOLD_PASSWORD)\n\nshimmer_wallet = ShimmerWallet(\'./shimmer-database\', shimmer_client_options, coin_type, shimmer_secret_manager)\n\n# Store the mnemonic in the Stronghold snapshot, this only needs to be done once\nshimmer_account = shimmer_wallet.store_mnemonic("flame fever pig forward exact dash body idea link scrub tennis minute " +\n         "surge unaware prosper over waste kitten ceiling human knife arch situate civil")\n\nshimmer_account = shimmer_wallet.create_account(\'Shimmer\')\nprint(f\'{shimmer_account["alias"]} account created.\')\n\niota_account_manager = iota_wallet.AccountManager(\n   storage_path=\'./iota-database\'\n) # note: `storage` and `storage_path` have to be declared together\n\niota_account_manager.set_stronghold_password(STRONGHOLD_PASSWORD)\n\n# mnemonic (seed) should be set only for new storage\n# once the storage has been initialized earlier then you should omit this step\niota_account_manager.store_mnemonic("Stronghold")\n\n# general Tangle specific options\niota_client_options = {\n   "nodes": [\n       {\n           "url": "https://api.lb-0.h.chrysalis-devnet.iota.cafe/",\n           "auth": None,\n           "disabled": False\n       }\n   ],\n   "local_pow": True\n}\n\n# an account is generated with the given alias via `iota_account_initialiser`\niota_account_initialiser = iota_account_manager.create_account(iota_client_options)\niota_account_initialiser.alias(\'IOTA\')\n\n# initialise account based via `iota_account_initialiser`\n# store it to db and sync with Tangle\niota_account = iota_account_initialiser.initialise()\nprint(f\'{iota_account.alias()} account created.\')\n')))}m.isMDXComponent=!0}}]);